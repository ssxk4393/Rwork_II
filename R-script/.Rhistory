test <- matrix(c(t1, t2), nrow = 2000, ncol = 2)# 학습데이터와 구조 동일
pred <-nn.predict(dnn_model, test)
pred # 예측결과 확률값
tail(pred,1000)
nn.test(dnn_model, test, y)
cpred <- ifelse(pred[,1]>=0.5, 1, 0)
cpred
table(cpred, y)
(990 + 1000)/nrow(y)
(990 + 1000)/length(y)
nn.test(dnn_model, test, y)
x = matrix(c(0,0,1,1,0,1,0,1), ncol=2)
y = c(0,1,1,1) # 이진 분류
x; y
nn <- nn.train(x, y, hidden=c(2))
pred <- nn.predict(nn, x) # x : 입력데이터로 평가
pred
pred <- nn.predict(nn, x) # x : 입력데이터로 평가
pred
nn <- nn.train(x, y, hidden=c(2), learningrate=10, numepoch=100)
pred <- nn.predict(nn, x)
pred
cpred <- ifelse(pred >= 0.5, 1, 0)
table(cpred, y) # 분류정확도 : 100%
nn.test(nn, x, y)
x = matrix(c(0,0,1,1,0,1,0,1), ncol=2)
y = c(0,0,0,1)
x; y
nn <- nn.train(x, y, hidden=c(2))
nn
pred <- nn.predict(nn, x)
pred
nn <- nn.train(x, y, hidden=c(2), learningrate=10, numepoch=100)
pred <- nn.predict(nn, x)
pred
cpred <- ifelse(pred >= 0.5, 1, 0)
table(cpred, y) # 분류정확도 : 100%
x = matrix(c(0,0,1,1,0,1,0,1), ncol=2)
y = c(0,1,1,0)
x; y
nn <- nn.train(x, y, hidden=c(2))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
nn <- nn.train(x, y, hidden=c(2), numepoch=100000)
pred <- nn.predict(nn, x)
pred
cpred <- ifelse(pred >= 0.5, 1, 0)
table(cpred, y) # 분류정확도 : 100%
nn <- nn.train(x, y, hidden=c(2), learningrate=10, numepoch=10000)
pred <- nn.predict(nn, x)
pred
cpred <- ifelse(pred >= 0.5, 1, 0)
table(cpred, y) # 분류정확도 : 100%
nn <- nn.train(x, y, hidden=2, learningrate=10, numepoch=10000)
pred <- nn.predict(nn, x)
pred
cpred <- ifelse(pred >= 0.5, 1, 0)
table(cpred, y) # 분류정확도 : 100%
?nn.train
?dbn.dnn.train
d1 <- c(rnorm(1000, 1, 0.5), rnorm(1000, -0.6, 0.2))
d2 <- c(rnorm(1000, -0.8, 0.2), rnorm(1000, 2, 1))
x <- matrix(c(d1, d2), nrow = 2000, ncol = 2) # 2000행2열
y <-c(rep(1,1000),rep(0,1000))
dnn_model <- dbn.dnn.train(x, y, hidden = c(1000,1000,1000))
x = matrix(c(0,0,1,1,0,1,0,1), ncol=2)
y = c(0,1,1,0)
x; y
nn <- nn.train(x, y, hidden=c(4,4,4))
nn <- nn.train(x, y, hidden=c(1000,1000,1000))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
x = matrix(c(0,0,1,1,0,1,0,1), ncol=2)
y = c(0,1,1,0)
nn <- nn.train(x, y, hidden=c(10,10))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
nn <- nn.train(x, y, hidden=c(200,200))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
nn <- nn.train(x, y, hidden=c(2000,2000))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
nn <- nn.train(x, y, hidden=c(2))
nn.predict(nn, x) # model를 이용하여 x(input) 예측
nn <- nn.train(x, y, hidden=2, learningrate=10, numepoch=10000)
pred <- nn.predict(nn, x)
pred
rm(list=ls())
install.packages('recommenderlab')
library(recommenderlab)
movie <- read.csv(file.choose(), header = T) # movie.csv
movie # user movie1 movie2 movie3 movie4 movie5
movie_t <- t(movie[,-c(1,5,6)]) # 3개 칼럼 제외(user, movie4, movie5)
movie_t # movie(3) x user(5)
class(movie_t) # "matrix"
colnames(movie_t) <- c("a","b","c","d","e")
movie_t
cor(movie_t) # a사용자 기준 세번째(c)와 네번째(d) 사용자 가장 높음
cor(movie_t) # a사용자 기준 세번째(c)와 네번째(d) 사용자 가장 높음
movie_t
movie <- read.csv(file.choose(), header = T) # movie.csv
movie
library(reshape2)
movie_long <- melt(id=1, movie) # movie(원본 data 구조변경)  id=1은 첫번째 컬럼을 기준으로 하겠다는 의미
movie_long
str(movie_long) # 'data.frame':	25 obs. of  3 variables:
names(movie_long) <- c('user','movie','rating')
movie_long
movie_long <- subset(movie_long, rating != 0)
movie_long
length(movie_long$rating) # 21(4개 제거됨)
movie_real <- as(movie_long, "realRatingMatrix") # 5명 사용자의 영화별점 데이터
dim(movie_real) # 5 5
movie_real
as(movie_real, "matrix") # 2단계에서 0으로 제거된 부분은 NA 처리됨
movie_long
movie_real <- as(movie_long, "realRatingMatrix") # 5명 사용자의 영화별점 데이터
dim(movie_real) # 5 5
movie_real
as(movie_real, "matrix") # 2단계에서 0으로 제거된 부분은 NA 처리됨
movie
as(movie_real, "matrix") # 2단계에서 0으로 제거된 부분은 NA 처리됨
movie
movie_t <- moive[,2:6]
movie_t <- movie[,2:6]
movie_t
rownames(movie_t) <- movie[,1]
movie_t
as(movie_real, "matrix") # 2단계에서 0으로 제거된 부분은 NA 처리됨
class(as(movie_real, "matrix")[1,4]) # 2단계에서 0으로 제거된 부분은 NA 처리됨
trainSet <- movie_real[c(2:5),] # 학습데이터 생성
trainSet # 4 x 5 rating matrix of class ‘realRatingMatrix’ with 5 ratings.
as(movie_real, "matrix")  # 2단계에서 0으로 제거된 부분은 NA 처리됨
as(trainSet, 'matrix')
recommTarget <- movie_real[1,] # a 사용자 대상 영화 추천 예측
recommTarget # 1 x 5 rating matrix of class ‘realRatingMatrix’ with 3 ratings.
as(recommTarget, 'matrix')
?Recommender
recom_model <- Recommender(trainSet, method="UBCF", parameter ="Pearson")# 유사도 : 상관계수 방식
recom_model # learned using 4 users.
recomm_list <- predict(recom_model, recommTarget, n=2) # 사용자 당 2개씩 추천
recom_result <- as(recomm_list,"list")
recom_result # 전체사용자별(model) ->  a 사용자 추천 예측(predict)
cor(movie_t) # a사용자 기준 세번째(c)와 네번째(d) 사용자 가장 높음
movie_t <- t(movie[,-c(1,5,6)]) # 3개 칼럼 제외(user, movie4, movie5)
movie_t # movie(3) x user(5)
class(movie_t) # "matrix"
colnames(movie_t) <- c("a","b","c","d","e")
movie_t
cor(movie_t) # a사용자 기준 세번째(c)와 네번째(d) 사용자 가장 높음
movie_t
movie # user movie1 movie2 movie3 movie4 movie5
gloseri <- read.csv(file.choose(), header = T) # gloseri.csv
head(gloseri)
realData <- as(gloseri, 'realRatingMatrix')
as(realData, 'matrix') # user*item(7*5)
head(gloseri)
as(realData, 'matrix') # user*item(7*5)
sample(1:7, 6)
trainIdx <- sample(1:7, 6)
trainSet <- realData[trainIdx]
trainSet # 6 x 5 rating matrix of class ‘realRatingMatrix’ with 19 ratings.
rowCounts(trainSet)
as(trainSet, 'matrix')
trainSet2 <- trainSet[rowCounts(trainSet) >= 3 ]
as(trainSet2, 'matrix') # 전체 6명중 5명 선정
recomm_model_gl <- Recommender(trainSet2, method="UBCF", parameter ="Cosine")
recomm_model_gl # learned using 5 users.
recomm_target_gl <- realData[-trainData ]  # 1 x 5 rating matrix
recomm_target_gl <- realData[-trainIdx ]  # 1 x 5 rating matrix
recomm_target_gl # 1 x 5 rating matrix of class ‘binaryRatingMatrix’ with 3 ratings.
as(recomm_target_gl, 'matrix')
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=2) # 사용자 당 Top2개 추천
recomm_result <- as(recommandList, 'list')
recomm_result
as(recomm_target_gl, 'matrix')
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=) # 사용자 당 Top2개 추천
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=1) # 사용자 당 Top2개 추천
recomm_result <- as(recommandList, 'list')
recomm_result
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=3) # 사용자 당 Top2개 추천
recomm_result <- as(recommandList, 'list')
recomm_result
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=2) # 사용자 당 Top2개 추천
recomm_result <- as(recommandList, 'list')
recomm_result
realData
realData_b <- binarize(realData, minRating=1) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
realData_b <- binarize(realData, minRating=2) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
realData_b <- binarize(realData, minRating=5) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
realData_b <- binarize(realData, minRating=1) # 1이상은 1, 나머지는 0(2진화)
as(realData_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
trainIdx <- sample(1:7, 6) # 7명중 6명 랜덤 선정
trainSet <- realData_b[trainIdx ]
trainSet # 6 x 5 rating matrix of class ‘binaryRatingMatrix’ with 19 ratings.
as(trainSet, 'matrix')
realData
realData
as(trainSet, 'matrix')
recomm_target_gl <- realData_b[-trainIdx ]  # 1 x 5 rating matrix
recomm_target_gl # 1 x 5 rating matrix of class ‘binaryRatingMatrix’ with 3 ratings.
as(recomm_target_gl, 'matrix')
recomm_model_gl <- Recommender(trainSet, method="IBCF", parameter ="Jaccard") # Jaccard : 대표적인 binary 유사도
recomm_model_gl # learned using 6 users.
recommandList <- predict(recomm_model_gl, recomm_target_gl, n=2)
recomm_result <- as(recommandList, 'list')
recomm_result
setClass('car')
setClass('car', representation = list(
cc <- 'numeric',
door <- 'numeric',
name <- 'character'
))
rm(car)
setClass('car', representation = list(
cc <- 'numeric',
door <- 'numeric',
name <- 'character'
))
setClass('car', representation = list(
cc <- 'numeric',
door <- 'numeric',
name <- 'character'
))
setClass('car', representation = list(
cc = 'numeric',
door = 'numeric',
name = 'character'
))
sonata <- new('car', cc=2500, door=4, name='sonata')
sonata
sonata@cc
sonata[1]
sonata[[1]]
sonata@door
sonata@name
str(sonata)
data(MovieLense) # recommenderlab 패키지에서 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
head(as(MovieLense, "matrix")[, c(1:5)])
help(MovieLense)
as(MovieLense[1,], "list")
as(MovieLense[1,], "list")[[1]]
head(as(MovieLense[1,], "list")[[1]])
head(as(MovieLense[2,], "list")[[1]]) # 2번 사용자의 6개 영화 평점 보기
str(MovieLense) # class 구조 보기
MovieLense@normalize
MovieLense@data # data 보기
getRatingMatrix(MovieLense) # 사용자 별 영화평점을 matrix로 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
rowCounts(MovieLense) # 943명 사용자별 영화평점 합계 보기
sum(5,3,4,3,3,5,4,1,5,3,2,5,5,5,5,5,3,4,5,4,1,4,4,3,4,3,2,4,1,3,3,5,4,2,1,2,2,3,4,3,2,5,4,5,5,4,4,5,3,5,4,4,3)
sum(MovieLense@data[1])
sum(MovieLense@data[[1])
sum(MovieLense@data[[1]])
rowCounts(MovieLense) # 943명 사용자별 본 영화 수 보기
table(rowCounts(MovieLense) >= 50)
rowCounts(MovieLense) >= 50
table(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense))
table(colCounts(MovieLense) >= 100)
MovieLense[1,]
sum(MovieLense[1,])
table(colCounts(MovieLense) >= 100)
image(MovieLense[1:100,1:100]) # 이미지 개괄확인 : 1 row는 모두 채워짐
sample(MovieLense, 500)
image(sample(MovieLense, 500), main = "Raw ratings")
sample(1:100, 50)
rowSums(MovieLense[1,])
rowCounts(MovieLense) # 943명 사용자별 본 영화 수 보기
table(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense) >= 50)
head(rowCounts(MovieLense))
table(colCounts(MovieLense) >= 100)
rowSums(MovieLense[1,])
rowSums(MovieLense)
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
ratings_movies # 565 x 332 rating matrix of class
idx <-sample(1:nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <-ratings_movies[idx, ] # 90%
recomm_target <-ratings_movies[-idx, ] # 10%
dim(trainSet) # 508 336
dim(recomm_target) # 57 336
recomm_model <- Recommender(trainSet, method="UBCF", parameter ="Cosine") # 508명 대상 모델 생성
recomm_list <- predict(recomm_model, recomm_target, n=5) # 5개씩 영화 추천
recomm_list
as(recomm_list, "list")
length(as(recomm_list, "list"))
recomm_list
class(recomm_list  )
mode(recomm_list)
recomm_list@items
recomm_list@ratings
recomm_list@itemLabels
str(recomm_list)
as(recomm_list, "list")
as(recomm_list, "matrix")
as(recomm_list, "data.frame")
as(recomm_list, "list")
MovieLense
as(MovieLense,'matrix')
MovieLense
as(MovieLense,"matrix")
as(MovieLense[,1],"matrix")
head(as(MovieLense[,1],"matrix"))
head(as(MovieLense[1,],"matrix"))
head(as(MovieLense[2,],"matrix"))
head(as(MovieLense, "matrix")[, c(1:5)])
as(MovieLense, 'matrix')
as(MovieLense, 'matrix')[,1]
as(MovieLense, 'matrix')[1,]
as(MovieLense, 'matrix')
MovieLense[1,]
as(MovieLense[1,], 'matrix')
as(MovieLense, 'matrix')[1,]
head(as(MovieLense, 'matrix')[1,])
head(as(MovieLense, 'matrix')[,2])
head(as(MovieLense, "matrix")[, c(1:5)])
head(as(MovieLense, 'matrix')[,1])
as(MovieLense, 'matrix')
as(MovieLense, 'matrix')[,1]
head(as(MovieLense, 'matrix')[,c(1:3)])
MovieLense_s <- subset(MovieLense[rowCounts(MovieLense)>=100, colCounts(MovieLense) >= 150])
MovieLense_s <- subset(MovieLense, MovieLense[rowCounts(MovieLense)>=100, colCounts(MovieLense) >= 150])
rowCounts(MovieLense)
rowCounts(MovieLense)>=100
MovieLense_s <- MovieLense[rowCounts(MovieLense)>=100, colCounts(MovieLense) >= 150]
MovieLense
MovieLense_s
sample(MovieLense_s, MovieLense_s*0.95)
sample(1:nrow(MovieLense_s), nrow(MovieLense_s)*0.95)
idx <- sample(1:nrow(MovieLense_s), nrow(MovieLense_s)*0.95)
train_movie <- MovieLense_s[idx,]
train_movie <- MovieLense_s[idx,]
recomm_movie <- MovieLense_s[-idx,]
reco_model <- Recommender(train_movie, method='UBCF', parameter='Cosine')
reco_list <- predict(reco_model, recomm_movie, n=3)
reco_list
as(reco_list, 'list')
recomm <- as(reco_list, 'list')
recomm
recomm$`933`
str(recomm)
recomm
as(recomm,'matrix')
recomm
recomm$`233`
as.data.frame(recomm)
recomm_df <- as.data.frame(recomm)
as.matrix(recomm_df)
recomm_ma <- as.matrix(recomm_df)
t(recomm_ma)
as.data.frame(t(recomm_ma))
as.data.frame(t(recomm_ma))
recommend <- as.data.frame(t(recomm_ma))
recommend
reco_list
str(reco_list)
reco_list@itemLabels
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbListFields(conn, "goods") # conn, table name
data(MovieLense) # recommenderlab 패키지에서 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
rowCounts(MovieLense) >= 50
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
ratings_movies # 560 x 332 rating matrix of class
ratings_movies_b <- binarize(ratings_movies, minRating=1) # minRating : 몇번 이상을 True로 볼것인가.
as(ratings_movies_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
ratings_movies # 560 x 336 rating matrix of class
as(ratings_movies,'matrix')
as(ratings_movies_b, 'matrix') # FALSE(NA)/TRUE(숫자) 이진화
idx <-sample(1:nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <- ratings_movies_b[idx, ] # 90%
recomm_target <- ratings_movies_b[-idx, ] # 10%
dim(trainSet) # 508 336
dim(recomm_target) # 57 336
recomm_model <- Recommender(trainSet, method="IBCF", parameter ="Jaccard") # 508명 대상 모델 생성
recomm_list <- predict(recomm_model, recomm_target, n=5) # 57명 사용자에게 5개씩 영화 추천
recomm_list  # Recommendations as ‘topNList’ with n = 5 for 57 users.
dim(recomm_target) # 57 336
recomm_model
recomm_list
head(as(recomm_list, "list")) # 6명 추천영화 보기
data(MovieLense)
library(recommenderlab)
MovieLense
movie_ch <- MovieLense[rowCounts(MovieLense) >= 100, colCounts(MovieLense) >= 50]
movie_ch
idx <- sample(1:nrow(movie_ch), nrow(movie_ch)*0.9)
train_m <- movie_ch[idx,]
recom_m <- movie_ch[-idx,]
train_m
recom_m
recom_m <-
recom_m <- movie_ch[-idx,]
recom_m
ij_model <- Recommender(train_m, method='IBCF', parameter='Jacaord')
ij_recom <- predict(ij_model, recom_m)
ij_recom
ij_recom <- predict(ij_model, recom_m, n=10)
ij_recom
ij_recom <- predict(ij_model, recom_m, n=5)
ij_recom
ij_recom <- predict(ij_model, recom_m, n=10)
ij_recom
ij_recom@itemLabels
as(ij_recom, 'list')
ij_list <- as(ij_recom, 'list')
as.data.frame(ij_list)
t(as.data.frame(ij_list))
ij_df <- as.data.frame(t(as.data.frame(ij_list)))
ij_df
table(ij_df)
ij_list
unlist(ij_list)
class(unlist(ij_list))
table(class(unlist(ij_list)))
table(unlist(ij_list))
ij_df
table(unlist(ij_list))
max(table(unlist(ij_list)))
unlist(ij_list)[6]
ij_unlist <- unlist(ij_list)
max(table(ij_unlist))
unlist(ij_list)[6]
data(MovieLense) # recommenderlab 패키지에서 제공
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
ratings_movies # 566 x 336 rating matrix of class
eval_scheme = evaluationScheme(data=ratings_movies,
method="split", train=0.8, given=15,
goodRating=5, k=5)
eval_scheme
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
ubcf_method
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(1,3,5)) # Top10에서 1,3,5번째 출력
result # 평가 객체 정보
avg(result) # recommenderlab 패키지 제공 함수 : 혼돈matrix 정보 제공
model_u <- MovieLense[rowCounts(MovieLense)>=50, colCounts(MovieLense) >= 50]
eval_scheme <- evaluationScheme(data=model_u, method='split', train=0.8, given=20, goodRating=5, k=3)
?evaluationScheme
eval_scheme <- evaluationScheme(data=model_u, method='cross-validation', train=0.8, given=20, goodRating=5, k=3)
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(2,4,6))
avg(result)
recommend
library(DBI)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111')
library(rJava)
library(RJDBC) # rJava에 의존적이다.
drv <- JDBC(driverClass="com.mysql.jdbc.Driver",
classPath="C:\\NCS\\python\\util\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40\\mysql-connector-java-5.1.40-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://127.0.0.1:3306/work", "scott", "tiger")
dbSendUpdate(conn,'drop table recommend')
eval_scheme <- evaluationScheme(data=model_u, method='cross-validation',  given=20, goodRating=5, k=3)
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
"UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(2,4,6))
avg(result)
calcPredictionAccuracy(result)
recommend
query <-"create or replace table recom(id varchar(10), movie1 varchar(100), movie2 varchar(100), movie3 varchar(100))"
dbSendUpdate(conn, query)
colnames(recommned) <- c('movie1','movie2','movie3')
colnames(recommend) <- c('movie1','movie2','movie3')
recommend
install.packages('knitr')
library(knitr)
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
summary(cars)
install.packages('rprojroot')
library(rprojroot)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
str(iris)
knitr::opts_chunk$set(echo = TRUE)
table(p, test$Species) # 예측결과, 원형 test의 y변수
model <- naiveBayes(train[-5], train$Species)
library(e1071)
idx <- sample(1:nrow(iris), 0.7*nrow(iris)) # 7:3 비율로 idx 랜덤 추출
train <- iris[idx, ]
test <- iris[-idx, ]
model <- naiveBayes(train[-5], train$Species)
model # 105개 학습 데이터를 이용하여 x변수(4개)를 y변수로 학습시킴
p <- predict(model, test, type='class')
p
table(p, test$Species) # 예측결과, 원형 test의 y변수
