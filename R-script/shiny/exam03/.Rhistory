runExample("01_hello") # a histogram
library(shiny) # 패키지 로드
runExample("01_hello") # a histogram
runExample("05_sliders") # slider bars
runExample("08_html") # Shiny app built from HTML
runExample("06_tabsets") # tabbed panels
runExample("08_html") # Shiny app built from HTML
runExample("02_text") # tables and data frames
runExample("11_timer") # an automated timer
runExample("10_download") # file download wizard
runExample("10_download") # file download wizard
runExample("04_mpg") # global variables
runExample("03_reactivity") # a reactive expression
runApp('C:/NCS/Rwork_II/R-script/shiny/app7')
runApp()
weatherAUS = read.csv('c:/NCS/RworkII/data/weatherAUS.csv', header = T)
weatherAUS = read.csv('C:/NCS/RworkII/data/weatherAUS.csv', header = T)
weatherAUS = read.csv('C:/NCS/Rwork_II/data/weatherAUS.csv', header = T)
str(weatherAUS)
weatherAUS = weatherAUS[ ,c(-1,-2, -22, -23)]
set.seed(415)
idx = sample(1:nrow(weatherAUS), 0.7*nrow(weatherAUS))
training_w = weatherAUS[idx, ]
testing_w  = weatherAUS[-idx, ]
training_w = na.omit(training_w)
testing_w = na.omit(testing_w)
runApp()
weatherAUS = read.csv('c:/NCS/Rwork_II/data/weatherAUS.csv', header = T)
weatherAUS = weatherAUS[ ,c(-1,-2, -22, -23)]
set.seed(415)
idx = sample(1:nrow(weatherAUS), 0.7*nrow(weatherAUS))
training_w = weatherAUS[idx, ]
testing_w  = weatherAUS[-idx, ]
training_w = na.omit(training_w)
testing_w = na.omit(testing_w)
shinyServer(function(input, output) {
datasetInput <- input$radio
if(datasetInput==1){
output$summary <- renderPrint({
library(e1071)
model_nb <- naiveBayes(RainTomorrow~., data=training_w)
pred_nb <- predict(model_nb, testing_w)
t <- table(pred_nb, testing_w$RainTomorrow)
sum(diag(t))/nrow(testing_w)
})
}else if(datasetInput==2){
output$summary <- renderPrint({
library(rpart)
model_dt <- rpart(RainTomorrow~., data=training_w)
pred_dt <- predict(model_dt, testing_w, type="class")
t <- table(pred_dt, testing_w$RainTomorrow)
sum(diag(t))/nrow(testing_w)
})
}else if(datasetInput==3){
output$summary <- renderPrint({
library(randomForest)
model_rm <- randomForest(RainTomorrow~., data=training_w, mtree=500, mtry=4, na.action=na.omit)
pred_rm <- predict(model_rm, testing_w)
t <-table(pred_rm, testing_w$RainTomorrow)
sum(diag(t))/nrow(testing_w)
})
}else(datasetInput==4){
output$summary <- renderPrint({
library(randomForest)
model_r <- svm(RainTomorrow~., data=training_w, kernel='radial')
pred_r <- predict(model_r, testing_w)
t_r <- table(pred_r, testing_w$RainTomorrow)
})
}
# output$distPlot <- renderPlot({
#
#   # generate bins based on input$bins from ui.R
#   x    <- faithful[, 2]
#   bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
#   # draw the histogram with the specified number of bins
#   hist(x, breaks = bins, col = 'darkgray', border = 'white')
#
# })
})
runApp()
runApp()
runApp()
runApp()
runApp()
a<-1
if(a==1){
a+2
}
a<-1
if(a==1){
a+2
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/NCS/Rwork_II/R-script/shiny/app7')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
