#################################
# UBCF 기반 영화 추천 모델 실습 
#################################
library(recommenderlab)

# 해결과제) 사용자별 영화 평가 점수 데이터셋으로 추천 모델 생성  

data(MovieLense) # recommenderlab 패키지에서 제공 
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.
# user : 943 x item : 1664

# 6명 사용자의 5개 영화 평점 행렬구조   
head(as(MovieLense, "matrix")[, c(1:5)])

help(MovieLense)
# 개인 사용자별 영화 평점 리스트 구조  
head(as(MovieLense[1,], "list")[[1]]) # 1번 사용자의 6개 영화 평점 보기
head(as(MovieLense[2,], "list")[[1]]) # 2번 사용자의 6개 영화 평점 보기


# 전체 사용자별 영화평점 matrix : class 멤버 이용  
str(MovieLense) # class 구조 보기 
MovieLense@data # data 보기 
getRatingMatrix(MovieLense) # 사용자 별 영화평점을 matrix로 제공  

# 각 사용자별 행 단위 합계 : 사용자별 영화 평점 합계 
rowCounts(MovieLense) # 943명 사용자별 영화평점 합계 보기 

table(rowCounts(MovieLense) >= 50)

head(rowCounts(MovieLense) >= 50)

head(rowCounts(MovieLense))

table(colCounts(MovieLense) >= 100)

# 이미지 시각화로 전체 view 보기 
image(MovieLense[1:100,1:100]) # 이미지 개괄확인 : 1 row는 모두 채워짐  
image(sample(MovieLense, 500), main = "Raw ratings")


# 과적합 문제 해결을 위해서 영화의 행과 열수 지정 
# - 사용자(user)별 평점 합계가 50점 이상 사용자(user) 선정 
# - 영화(item)별 평점 합계가 100 이상인 영화(item) 선정 
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
# rowCounts() : 사용자 필터링, colCounts() : 영화 필터링 -> recommenderlab 패키지에서 제공
ratings_movies # 565 x 332 rating matrix of class 

#  ratings_movies 에서 랜덤으로 training 데이터셋을 추출
idx <-sample(1:nrow(ratings_movies), nrow(ratings_movies)*0.9)
trainSet <-ratings_movies[idx, ] # 90%
recomm_target <-ratings_movies[-idx, ] # 10%
dim(trainSet) # 508 336
dim(recomm_target) # 57 336


# UBCF 방식 : 사용자 기반 협업 필터링, 코사인 유사도   
recomm_model <- Recommender(trainSet, method="UBCF", parameter ="Cosine") # 508명 대상 모델 생성 
recomm_list <- predict(recomm_model, recomm_target, n=5) 5개씩 영화 추천 
recomm_list  

# 57명 사용자에게 추천영화 5개씩 제공  
as(recomm_list, "list")

length(as(recomm_list, "list")) 
