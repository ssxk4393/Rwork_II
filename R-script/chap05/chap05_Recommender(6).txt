#####################################
# 추천 모델 평가(evaluation) 
#####################################
# 해결과제) 추천 모델 평가(최적의 유사도와 이웃의 크기를 갖는 추천 모델 생성과 분류정확도)  

# 1. 추천시스템 데이터 생성 : rating matrix 생성  
data(MovieLense) # recommenderlab 패키지에서 제공 
MovieLense # 943 x 1664 rating matrix of class ‘realRatingMatrix’ with 99392 ratings.

# 과적합을 위해서 영화의 행과 열수 지정 
ratings_movies = MovieLense[ rowCounts(MovieLense) >= 50, colCounts(MovieLense) >= 100]
# rowCounts(); colCounts() - recommenderlab 패키지에서 제공
ratings_movies # 566 x 336 rating matrix of class 

# 2. 추천 정확도 평가를 위한 시뮬레이션 생성 :  추천 정확도 측정을 위한 스키마  
eval_scheme = evaluationScheme(data=ratings_movies,
                             method="split", train=0.8, given=15,
                             goodRating=5, k=5)
# data=ratings_movies : 추천시스템 데이터(rating matrix)
# method="split" : 지정한 비율로 분할하여 검정 ("split, cross-validation, bootstrap)
# train=0.8 : 학습 데이터 셋 80% 비율("split", "bootstrap") 
# given=15 : 사용자 당 학습할 item 수
# goodRating=5 : 사용자가 5명 이상인 item을 평가 대상으로 지정(Neighbor로 지정하는 기준) 
# k=5 : 시뮬레이션 횟수(5회 시뮬레이션 결과의 평균)  

eval_scheme

# 3. 시뮬레이션에 사용할 협업필터링 방식과 유사도 지정 
ubcf_method <- list("UBCF_cosine" = list(name="UBCF", param=list(method="Cosine")),
                   "UBCF_pearson" = list(name="UBCF", param=list(method="Pearson")) )
ubcf_method

# 4. 추천시스템 평가 및 결과 
result <- evaluate(eval_scheme, ubcf_method, type="topNList", n=c(1,3,5)) # Top10에서 1,3,5번째 출력 
result # 평가 객체 정보 

# k=5회 시뮬레이션 결과의 평균 Top10을 대상으로 1,3,5번째 평가 결과 출력 
avg(result) # recommenderlab 패키지 제공 함수 : 혼돈matrix 정보 제공 

# confusion matrix
#  참  부정(TN)   거짓긍정(FP)
#  거짓부정(FN)   참  긍정(TP)
